{"ast":null,"code":"const mockBooks = [{\n  id: 1,\n  title: \"The Alchemist\",\n  author: \"Paulo Coelho\",\n  price: 299.99,\n  description: \"A philosophical tale about a shepherd boy's journey to fulfill his personal legend and find his treasure.\",\n  image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1654371463i/18144590.jpg\",\n  stock_quantity: 10\n}, {\n  id: 2,\n  title: \"Atomic Habits\",\n  author: \"James Clear\",\n  price: 499.00,\n  description: \"A comprehensive guide to building good habits and breaking bad ones through small, incremental changes.\",\n  image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1535115320i/40121378.jpg\",\n  stock_quantity: 20\n}, {\n  id: 3,\n  title: \"Clean Code\",\n  author: \"Robert C. Martin\",\n  price: 799.50,\n  description: \"Essential principles and practices for writing maintainable, readable, and efficient code.\",\n  image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1436202607i/3735293.jpg\",\n  stock_quantity: 30\n}, {\n  id: 4,\n  title: \"Deep Work\",\n  author: \"Cal Newport\",\n  price: 450.00,\n  description: \"Rules for focused success in a distracted world, showing how to cultivate deep, meaningful work.\",\n  image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1447957962i/25744928.jpg\",\n  stock_quantity: 15\n}, {\n  id: 5,\n  title: \"The Pragmatic Programmer\",\n  author: \"Andrew Hunt\",\n  price: 850.00,\n  description: \"Timeless tips and techniques for becoming a more effective and productive programmer.\",\n  image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1401432508i/4099.jpg\",\n  stock_quantity: 25\n}, {\n  id: 6,\n  title: \"Thinking, Fast and Slow\",\n  author: \"Daniel Kahneman\",\n  price: 599.00,\n  description: \"Insights into how the mind makes decisions, exploring the interplay between intuitive and deliberate thinking.\",\n  image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1317793965i/11468377.jpg\",\n  stock_quantity: 18\n}, {\n  id: 7,\n  title: \"Design Patterns\",\n  author: \"Erich Gamma\",\n  price: 999.00,\n  description: \"Elements of reusable object-oriented software design, presenting fundamental patterns for better code architecture.\",\n  image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1348027904i/85009.jpg\",\n  stock_quantity: 12\n}, {\n  id: 8,\n  title: \"Refactoring\",\n  author: \"Martin Fowler\",\n  price: 899.00,\n  description: \"Improving the design of existing code through systematic techniques and proven refactoring methods.\",\n  image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1386925632i/44936.jpg\",\n  stock_quantity: 20\n}, {\n  id: 9,\n  title: \"You Don't Know JS\",\n  author: \"Kyle Simpson\",\n  price: 399.00,\n  description: \"Deep dive into JavaScript's core mechanisms, covering scope, closures, prototypes, and async patterns.\",\n  image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1431016796i/25136217.jpg\",\n  stock_quantity: 22\n}, {\n  id: 10,\n  title: \"Introduction to Algorithms\",\n  author: \"Thomas H. Cormen\",\n  price: 1200.00,\n  description: \"Comprehensive guide to algorithms and data structures, covering analysis, design, and implementation.\",\n  image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1387741681i/108986.jpg\",\n  stock_quantity: 10\n}];\nexport const getBooks = async () => {\n  try {\n    const response = await fetch(\"http://localhost:8080/api/books\");\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data; // assuming your backend returns an array of books\n  } catch (error) {\n    throw new Error(`Failed to fetch books: ${error.message}`);\n  }\n};\nexport const validateOrder = orderData => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const {\n        cartItems,\n        user\n      } = orderData;\n      if (!user) {\n        reject(new Error('User information is required'));\n        return;\n      }\n      if (!user.name || user.name.trim().length < 2) {\n        reject(new Error('Valid user name is required'));\n        return;\n      }\n      if (!user.email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(user.email)) {\n        reject(new Error('Valid user email is required'));\n        return;\n      }\n      if (cartItems.length === 0) {\n        reject(new Error('Cart cannot be empty'));\n        return;\n      }\n      resolve({\n        orderId: `ORDER-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`,\n        status: 'confirmed',\n        estimatedDelivery: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString()\n      });\n    }, 1000);\n  });\n};\nexport const getBookById = bookId => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const book = mockBooks.find(b => b.id === bookId);\n      if (book) {\n        resolve(book);\n      } else {\n        reject(new Error(`Book with ID ${bookId} not found`));\n      }\n    }, 300);\n  });\n};\n\n// Authentication API Functions\nconst mockUsers = [];\nlet currentUser = null;\nlet userCartItems = [];\nexport const loginUser = credentials => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const {\n        email,\n        password\n      } = credentials;\n\n      // Check for demo accounts\n      if (email === 'demo@bookstore.com' && password === 'demo123') {\n        const user = {\n          id: 1,\n          name: 'Demo User',\n          email: 'demo@bookstore.com'\n        };\n        currentUser = user;\n        const token = `token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n        // Store in localStorage\n        localStorage.setItem('bookstore_token', token);\n        localStorage.setItem('bookstore_user', JSON.stringify(user));\n        resolve({\n          user,\n          token\n        });\n        return;\n      }\n\n      // Check registered users\n      const user = mockUsers.find(u => u.email === email && u.password === password);\n      if (user) {\n        currentUser = {\n          ...user\n        };\n        delete currentUser.password; // Don't return password\n        const token = `token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n        // Store in localStorage\n        localStorage.setItem('bookstore_token', token);\n        localStorage.setItem('bookstore_user', JSON.stringify(currentUser));\n        resolve({\n          user: currentUser,\n          token\n        });\n      } else {\n        reject(new Error('Invalid email or password'));\n      }\n    }, 1000);\n  });\n};\nexport const registerUser = userData => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const {\n        name,\n        email,\n        password\n      } = userData;\n\n      // Check if user already exists\n      const existingUser = mockUsers.find(u => u.email === email);\n      if (existingUser) {\n        reject(new Error('User with this email already exists'));\n        return;\n      }\n\n      // Create new user\n      const newUser = {\n        id: mockUsers.length + 2,\n        name,\n        email,\n        password,\n        createdAt: new Date().toISOString()\n      };\n      mockUsers.push(newUser);\n      currentUser = {\n        ...newUser\n      };\n      delete currentUser.password; // Don't return password\n\n      const token = `token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      // Store in localStorage\n      localStorage.setItem('bookstore_token', token);\n      localStorage.setItem('bookstore_user', JSON.stringify(currentUser));\n      resolve({\n        user: currentUser,\n        token\n      });\n    }, 1200);\n  });\n};\nexport const logoutUser = () => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      currentUser = null;\n      userCartItems = [];\n      localStorage.removeItem('bookstore_token');\n      localStorage.removeItem('bookstore_user');\n      localStorage.removeItem('bookstore_cart');\n      resolve();\n    }, 300);\n  });\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const token = localStorage.getItem('bookstore_token');\n      const user = localStorage.getItem('bookstore_user');\n      if (token && user) {\n        try {\n          currentUser = JSON.parse(user);\n          resolve({\n            user: currentUser,\n            token\n          });\n        } catch (error) {\n          reject(new Error('Invalid session data'));\n        }\n      } else {\n        reject(new Error('No active session'));\n      }\n    }, 500);\n  });\n};\n\n// Cart API Functions\nexport const getCartItems = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n\n      // Load cart from localStorage\n      const savedCart = localStorage.getItem('bookstore_cart');\n      if (savedCart) {\n        try {\n          userCartItems = JSON.parse(savedCart);\n        } catch (error) {\n          userCartItems = [];\n        }\n      }\n      resolve(userCartItems);\n    }, 400);\n  });\n};\nexport const addToCart = (book, quantity = 1) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n      const existingItemIndex = userCartItems.findIndex(item => item.id === book.id);\n      if (existingItemIndex !== -1) {\n        userCartItems[existingItemIndex].quantity += quantity;\n      } else {\n        userCartItems.push({\n          ...book,\n          quantity\n        });\n      }\n\n      // Save to localStorage\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\n      resolve(userCartItems);\n    }, 500);\n  });\n};\nexport const updateCartItem = (bookId, quantity) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n      if (quantity <= 0) {\n        userCartItems = userCartItems.filter(item => item.id !== bookId);\n      } else {\n        const itemIndex = userCartItems.findIndex(item => item.id === bookId);\n        if (itemIndex !== -1) {\n          userCartItems[itemIndex].quantity = quantity;\n        }\n      }\n\n      // Save to localStorage\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\n      resolve(userCartItems);\n    }, 400);\n  });\n};\nexport const removeFromCart = bookId => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n      userCartItems = userCartItems.filter(item => item.id !== bookId);\n\n      // Save to localStorage\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\n      resolve(userCartItems);\n    }, 400);\n  });\n};\nexport const clearCart = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n      userCartItems = [];\n\n      // Save to localStorage\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\n      resolve(userCartItems);\n    }, 300);\n  });\n};\nexport const processOrder = orderData => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n      const {\n        cartItems,\n        user\n      } = orderData;\n      if (!user) {\n        reject(new Error('User information is required'));\n        return;\n      }\n      if (!user.name || user.name.trim().length < 2) {\n        reject(new Error('Valid user name is required'));\n        return;\n      }\n      if (!user.email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(user.email)) {\n        reject(new Error('Valid user email is required'));\n        return;\n      }\n      if (cartItems.length === 0) {\n        reject(new Error('Cart is empty'));\n        return;\n      }\n\n      // Simulate order processing\n      const orderId = `ORDER-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\n\n      // Clear cart after successful order\n      userCartItems = [];\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\n      resolve({\n        orderId,\n        status: 'confirmed',\n        estimatedDelivery: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString(),\n        orderDate: new Date().toLocaleDateString()\n      });\n    }, 1500);\n  });\n};","map":{"version":3,"names":["mockBooks","id","title","author","price","description","image_url","stock_quantity","getBooks","response","fetch","ok","Error","status","data","json","error","message","validateOrder","orderData","Promise","resolve","reject","setTimeout","cartItems","user","name","trim","length","email","test","orderId","Date","now","Math","random","toString","substr","toUpperCase","estimatedDelivery","toLocaleDateString","getBookById","bookId","book","find","b","mockUsers","currentUser","userCartItems","loginUser","credentials","password","token","localStorage","setItem","JSON","stringify","u","registerUser","userData","existingUser","newUser","createdAt","toISOString","push","logoutUser","removeItem","getCurrentUser","getItem","parse","getCartItems","savedCart","addToCart","quantity","existingItemIndex","findIndex","item","updateCartItem","filter","itemIndex","removeFromCart","clearCart","processOrder","orderDate"],"sources":["C:/Users/sudha/Documents/Learnings/React/React_Learnings/online_book_store/online-book-store/src/api.js"],"sourcesContent":["const mockBooks = [\n  {\n    id: 1,\n    title: \"The Alchemist\",\n    author: \"Paulo Coelho\",\n    price: 299.99,\n    description: \"A philosophical tale about a shepherd boy's journey to fulfill his personal legend and find his treasure.\",\n    image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1654371463i/18144590.jpg\",\n    stock_quantity: 10\n  },\n  {\n    id: 2,\n    title: \"Atomic Habits\",\n    author: \"James Clear\",\n    price: 499.00,\n    description: \"A comprehensive guide to building good habits and breaking bad ones through small, incremental changes.\",\n    image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1535115320i/40121378.jpg\",\n    stock_quantity: 20\n  },\n  {\n    id: 3,\n    title: \"Clean Code\",\n    author: \"Robert C. Martin\",\n    price: 799.50,\n    description: \"Essential principles and practices for writing maintainable, readable, and efficient code.\",\n    image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1436202607i/3735293.jpg\",\n    stock_quantity: 30\n  },\n  {\n    id: 4,\n    title: \"Deep Work\",\n    author: \"Cal Newport\",\n    price: 450.00,\n    description: \"Rules for focused success in a distracted world, showing how to cultivate deep, meaningful work.\",\n    image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1447957962i/25744928.jpg\",\n    stock_quantity: 15\n  },\n  {\n    id: 5,\n    title: \"The Pragmatic Programmer\",\n    author: \"Andrew Hunt\",\n    price: 850.00,\n    description: \"Timeless tips and techniques for becoming a more effective and productive programmer.\",\n    image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1401432508i/4099.jpg\",\n    stock_quantity: 25\n  },\n  {\n    id: 6,\n    title: \"Thinking, Fast and Slow\",\n    author: \"Daniel Kahneman\",\n    price: 599.00,\n    description: \"Insights into how the mind makes decisions, exploring the interplay between intuitive and deliberate thinking.\",\n    image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1317793965i/11468377.jpg\",\n    stock_quantity: 18\n  },\n  {\n    id: 7,\n    title: \"Design Patterns\",\n    author: \"Erich Gamma\",\n    price: 999.00,\n    description: \"Elements of reusable object-oriented software design, presenting fundamental patterns for better code architecture.\",\n    image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1348027904i/85009.jpg\",\n    stock_quantity: 12\n  },\n  {\n    id: 8,\n    title: \"Refactoring\",\n    author: \"Martin Fowler\",\n    price: 899.00,\n    description: \"Improving the design of existing code through systematic techniques and proven refactoring methods.\",\n    image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1386925632i/44936.jpg\",\n    stock_quantity: 20\n  },\n  {\n    id: 9,\n    title: \"You Don't Know JS\",\n    author: \"Kyle Simpson\",\n    price: 399.00,\n    description: \"Deep dive into JavaScript's core mechanisms, covering scope, closures, prototypes, and async patterns.\",\n    image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1431016796i/25136217.jpg\",\n    stock_quantity: 22\n  },\n  {\n    id: 10,\n    title: \"Introduction to Algorithms\",\n    author: \"Thomas H. Cormen\",\n    price: 1200.00,\n    description: \"Comprehensive guide to algorithms and data structures, covering analysis, design, and implementation.\",\n    image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1387741681i/108986.jpg\",\n    stock_quantity: 10\n  }\n];\n\nexport const getBooks = async () => {\n  try {\n  const response = await fetch(\"http://localhost:8080/api/books\");\n \n  if (!response.ok) {\n  throw new Error(`HTTP error! status: ${response.status}`);\n  }\n \n  const data = await response.json();\n  return data; // assuming your backend returns an array of books\n  } catch (error) {\n  throw new Error(`Failed to fetch books: ${error.message}`);\n  }\n };\nexport const validateOrder = (orderData) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const { cartItems, user } = orderData;\n\n      if (!user) {\n        reject(new Error('User information is required'));\n        return;\n      }\n\n      if (!user.name || user.name.trim().length < 2) {\n        reject(new Error('Valid user name is required'));\n        return;\n      }\n\n      if (!user.email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(user.email)) {\n        reject(new Error('Valid user email is required'));\n        return;\n      }\n\n      if (cartItems.length === 0) {\n        reject(new Error('Cart cannot be empty'));\n        return;\n      }\n\n      resolve({\n        orderId: `ORDER-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`,\n        status: 'confirmed',\n        estimatedDelivery: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString()\n      });\n    }, 1000);\n  });\n};\n\nexport const getBookById = (bookId) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const book = mockBooks.find(b => b.id === bookId);\n      if (book) {\n        resolve(book);\n      } else {\n        reject(new Error(`Book with ID ${bookId} not found`));\n      }\n    }, 300);\n  });\n};\n\n// Authentication API Functions\nconst mockUsers = [];\nlet currentUser = null;\nlet userCartItems = [];\n\nexport const loginUser = (credentials) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const { email, password } = credentials;\n\n      // Check for demo accounts\n      if (email === 'demo@bookstore.com' && password === 'demo123') {\n        const user = {\n          id: 1,\n          name: 'Demo User',\n          email: 'demo@bookstore.com'\n        };\n        currentUser = user;\n        const token = `token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n        // Store in localStorage\n        localStorage.setItem('bookstore_token', token);\n        localStorage.setItem('bookstore_user', JSON.stringify(user));\n\n        resolve({ user, token });\n        return;\n      }\n\n      // Check registered users\n      const user = mockUsers.find(u => u.email === email && u.password === password);\n      if (user) {\n        currentUser = { ...user };\n        delete currentUser.password; // Don't return password\n        const token = `token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n        // Store in localStorage\n        localStorage.setItem('bookstore_token', token);\n        localStorage.setItem('bookstore_user', JSON.stringify(currentUser));\n\n        resolve({ user: currentUser, token });\n      } else {\n        reject(new Error('Invalid email or password'));\n      }\n    }, 1000);\n  });\n};\n\nexport const registerUser = (userData) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const { name, email, password } = userData;\n\n      // Check if user already exists\n      const existingUser = mockUsers.find(u => u.email === email);\n      if (existingUser) {\n        reject(new Error('User with this email already exists'));\n        return;\n      }\n\n      // Create new user\n      const newUser = {\n        id: mockUsers.length + 2,\n        name,\n        email,\n        password,\n        createdAt: new Date().toISOString()\n      };\n\n      mockUsers.push(newUser);\n      currentUser = { ...newUser };\n      delete currentUser.password; // Don't return password\n\n      const token = `token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      // Store in localStorage\n      localStorage.setItem('bookstore_token', token);\n      localStorage.setItem('bookstore_user', JSON.stringify(currentUser));\n\n      resolve({ user: currentUser, token });\n    }, 1200);\n  });\n};\n\nexport const logoutUser = () => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      currentUser = null;\n      userCartItems = [];\n      localStorage.removeItem('bookstore_token');\n      localStorage.removeItem('bookstore_user');\n      localStorage.removeItem('bookstore_cart');\n      resolve();\n    }, 300);\n  });\n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const token = localStorage.getItem('bookstore_token');\n      const user = localStorage.getItem('bookstore_user');\n\n      if (token && user) {\n        try {\n          currentUser = JSON.parse(user);\n          resolve({ user: currentUser, token });\n        } catch (error) {\n          reject(new Error('Invalid session data'));\n        }\n      } else {\n        reject(new Error('No active session'));\n      }\n    }, 500);\n  });\n};\n\n// Cart API Functions\nexport const getCartItems = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n\n      // Load cart from localStorage\n      const savedCart = localStorage.getItem('bookstore_cart');\n      if (savedCart) {\n        try {\n          userCartItems = JSON.parse(savedCart);\n        } catch (error) {\n          userCartItems = [];\n        }\n      }\n\n      resolve(userCartItems);\n    }, 400);\n  });\n};\n\nexport const addToCart = (book, quantity = 1) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n\n      const existingItemIndex = userCartItems.findIndex(item => item.id === book.id);\n\n      if (existingItemIndex !== -1) {\n        userCartItems[existingItemIndex].quantity += quantity;\n      } else {\n        userCartItems.push({ ...book, quantity });\n      }\n\n      // Save to localStorage\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\n\n      resolve(userCartItems);\n    }, 500);\n  });\n};\n\nexport const updateCartItem = (bookId, quantity) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n\n      if (quantity <= 0) {\n        userCartItems = userCartItems.filter(item => item.id !== bookId);\n      } else {\n        const itemIndex = userCartItems.findIndex(item => item.id === bookId);\n        if (itemIndex !== -1) {\n          userCartItems[itemIndex].quantity = quantity;\n        }\n      }\n\n      // Save to localStorage\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\n\n      resolve(userCartItems);\n    }, 400);\n  });\n};\n\nexport const removeFromCart = (bookId) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n\n      userCartItems = userCartItems.filter(item => item.id !== bookId);\n\n      // Save to localStorage\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\n\n      resolve(userCartItems);\n    }, 400);\n  });\n};\n\nexport const clearCart = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n\n      userCartItems = [];\n\n      // Save to localStorage\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\n\n      resolve(userCartItems);\n    }, 300);\n  });\n};\n\nexport const processOrder = (orderData) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n\n      const { cartItems, user } = orderData;\n\n      if (!user) {\n        reject(new Error('User information is required'));\n        return;\n      }\n\n      if (!user.name || user.name.trim().length < 2) {\n        reject(new Error('Valid user name is required'));\n        return;\n      }\n\n      if (!user.email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(user.email)) {\n        reject(new Error('Valid user email is required'));\n        return;\n      }\n\n      if (cartItems.length === 0) {\n        reject(new Error('Cart is empty'));\n        return;\n      }\n\n      // Simulate order processing\n      const orderId = `ORDER-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\n\n      // Clear cart after successful order\n      userCartItems = [];\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\n\n      resolve({\n        orderId,\n        status: 'confirmed',\n        estimatedDelivery: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString(),\n        orderDate: new Date().toLocaleDateString()\n      });\n    }, 1500);\n  });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}