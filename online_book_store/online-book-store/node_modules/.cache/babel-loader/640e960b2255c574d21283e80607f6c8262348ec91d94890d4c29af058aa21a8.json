{"ast":null,"code":"// const mockBooks = [\n//   {\n//     id: 1,\n//     title: \"The Alchemist\",\n//     author: \"Paulo Coelho\",\n//     price: 299.99,\n//     description: \"A philosophical tale about a shepherd boy's journey to fulfill his personal legend and find his treasure.\",\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1654371463i/18144590.jpg\",\n//     stock_quantity: 10\n//   },\n//   {\n//     id: 2,\n//     title: \"Atomic Habits\",\n//     author: \"James Clear\",\n//     price: 499.00,\n//     description: \"A comprehensive guide to building good habits and breaking bad ones through small, incremental changes.\",\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1535115320i/40121378.jpg\",\n//     stock_quantity: 20\n//   },\n//   {\n//     id: 3,\n//     title: \"Clean Code\",\n//     author: \"Robert C. Martin\",\n//     price: 799.50,\n//     description: \"Essential principles and practices for writing maintainable, readable, and efficient code.\",\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1436202607i/3735293.jpg\",\n//     stock_quantity: 30\n//   },\n//   {\n//     id: 4,\n//     title: \"Deep Work\",\n//     author: \"Cal Newport\",\n//     price: 450.00,\n//     description: \"Rules for focused success in a distracted world, showing how to cultivate deep, meaningful work.\",\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1447957962i/25744928.jpg\",\n//     stock_quantity: 15\n//   },\n//   {\n//     id: 5,\n//     title: \"The Pragmatic Programmer\",\n//     author: \"Andrew Hunt\",\n//     price: 850.00,\n//     description: \"Timeless tips and techniques for becoming a more effective and productive programmer.\",\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1401432508i/4099.jpg\",\n//     stock_quantity: 25\n//   },\n//   {\n//     id: 6,\n//     title: \"Thinking, Fast and Slow\",\n//     author: \"Daniel Kahneman\",\n//     price: 599.00,\n//     description: \"Insights into how the mind makes decisions, exploring the interplay between intuitive and deliberate thinking.\",\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1317793965i/11468377.jpg\",\n//     stock_quantity: 18\n//   },\n//   {\n//     id: 7,\n//     title: \"Design Patterns\",\n//     author: \"Erich Gamma\",\n//     price: 999.00,\n//     description: \"Elements of reusable object-oriented software design, presenting fundamental patterns for better code architecture.\",\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1348027904i/85009.jpg\",\n//     stock_quantity: 12\n//   },\n//   {\n//     id: 8,\n//     title: \"Refactoring\",\n//     author: \"Martin Fowler\",\n//     price: 899.00,\n//     description: \"Improving the design of existing code through systematic techniques and proven refactoring methods.\",\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1386925632i/44936.jpg\",\n//     stock_quantity: 20\n//   },\n//   {\n//     id: 9,\n//     title: \"You Don't Know JS\",\n//     author: \"Kyle Simpson\",\n//     price: 399.00,\n//     description: \"Deep dive into JavaScript's core mechanisms, covering scope, closures, prototypes, and async patterns.\",\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1431016796i/25136217.jpg\",\n//     stock_quantity: 22\n//   },\n//   {\n//     id: 10,\n//     title: \"Introduction to Algorithms\",\n//     author: \"Thomas H. Cormen\",\n//     price: 1200.00,\n//     description: \"Comprehensive guide to algorithms and data structures, covering analysis, design, and implementation.\",\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1387741681i/108986.jpg\",\n//     stock_quantity: 10\n//   }\n// ];\n\nlet BASE_URL = \"http://localhost:8080/\";\nexport const saveRefreshedToken = response => {\n  const refreshedToken = response.headers.get(\"X-Refreshed-Token\");\n  if (refreshedToken) {\n    localStorage.setItem(\"bookstore_token\", refreshedToken);\n  }\n};\n\n// export const getBooks = async () => {\n\n//   try {\n//     const token = localStorage.getItem(\"bookstore_token\");\n\n//     const response = await fetch(BASE_URL + \"api/books\", {\n//       method: \"GET\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"Authorization\": `Bearer ${token}`\n//       }\n//     });\n\n//     saveRefreshedToken(response);\n\n//     if (!response.ok) {\n//       throw new Error(`HTTP error! status: ${response.status}`);\n//     }\n\n//     const data = await response.json();\n//     return data;\n//   } catch (error) {\n//     console.log(\"error\", error);\n//     throw new Error(`Failed to fetch books: ${error.message}`);\n//   }\n\n// };\nexport const getBooks = async () => {\n  try {\n    const response = await fetch(\"http://localhost:8080/api/books\");\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data; // assuming your backend returns an array of books\n  } catch (error) {\n    throw new Error(`Failed to fetch books: ${error.message}`);\n  }\n};\nexport const validateOrder = orderData => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const {\n        cartItems,\n        user\n      } = orderData;\n      if (!user) {\n        reject(new Error('User information is required'));\n        return;\n      }\n      if (!user.name || user.name.trim().length < 2) {\n        reject(new Error('Valid user name is required'));\n        return;\n      }\n      if (!user.email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(user.email)) {\n        reject(new Error('Valid user email is required'));\n        return;\n      }\n      if (cartItems.length === 0) {\n        reject(new Error('Cart cannot be empty'));\n        return;\n      }\n      debugger;\n      resolve({\n        orderId: `ORDER-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`,\n        status: 'confirmed',\n        estimatedDelivery: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString()\n      });\n    }, 1000);\n  });\n};\nexport const getBookById = bookId => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const book = mockBooks.find(b => b.id === bookId);\n      if (book) {\n        resolve(book);\n      } else {\n        reject(new Error(`Book with ID ${bookId} not found`));\n      }\n    }, 300);\n  });\n};\n\n// Authentication API Functions\nconst mockUsers = [];\nlet currentUser = null;\nlet userCartItems = [];\nexport const loginUser = async credentials => {\n  try {\n    const response = await fetch(BASE_URL + \"api/user/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      throw new Error(`Login failed: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // Assuming backend returns { token, name }\n    const {\n      token,\n      name\n    } = data;\n\n    // Construct user object like your mock version\n    const user = {\n      id: Date.now(),\n      // or use a real ID if backend provides it\n      name,\n      email: credentials.email\n    };\n\n    // Save to localStorage\n    localStorage.setItem(\"bookstore_token\", token);\n    localStorage.setItem(\"bookstore_user\", JSON.stringify(user));\n    return {\n      user,\n      token\n    };\n  } catch (error) {\n    throw new Error(`Login error: ${error.message}`);\n  }\n};\nexport const registerUser = userData => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const {\n        name,\n        email,\n        password\n      } = userData;\n\n      // Check if user already exists\n      const existingUser = mockUsers.find(u => u.email === email);\n      if (existingUser) {\n        reject(new Error('User with this email already exists'));\n        return;\n      }\n\n      // Create new user\n      const newUser = {\n        id: mockUsers.length + 2,\n        name,\n        email,\n        password,\n        createdAt: new Date().toISOString()\n      };\n      mockUsers.push(newUser);\n      currentUser = {\n        ...newUser\n      };\n      delete currentUser.password; // Don't return password\n\n      const token = `token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      // Store in localStorage\n      localStorage.setItem('bookstore_token', token);\n      localStorage.setItem('bookstore_user', JSON.stringify(currentUser));\n      resolve({\n        user: currentUser,\n        token\n      });\n    }, 1200);\n  });\n};\nexport const logoutUser = () => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      currentUser = null;\n      userCartItems = [];\n      localStorage.removeItem('bookstore_token');\n      localStorage.removeItem('bookstore_user');\n      localStorage.removeItem('bookstore_cart');\n      resolve();\n    }, 300);\n  });\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const token = localStorage.getItem('bookstore_token');\n      const user = localStorage.getItem('bookstore_user');\n      if (token && user) {\n        try {\n          currentUser = JSON.parse(user);\n          resolve({\n            user: currentUser,\n            token\n          });\n        } catch (error) {\n          reject(new Error('Invalid session data'));\n        }\n      } else {\n        reject(new Error('No active session'));\n      }\n    }, 500);\n  });\n};\n\n// Cart API Functions\nexport const getCartItems = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n\n      // Load cart from localStorage\n      const savedCart = localStorage.getItem('bookstore_cart');\n      if (savedCart) {\n        try {\n          userCartItems = JSON.parse(savedCart);\n        } catch (error) {\n          userCartItems = [];\n        }\n      }\n      resolve(userCartItems);\n    }, 400);\n  });\n};\nexport const addToCart = (book, quantity = 1) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n      const existingItemIndex = userCartItems.findIndex(item => item.id === book.id);\n      if (existingItemIndex !== -1) {\n        userCartItems[existingItemIndex].quantity += quantity;\n      } else {\n        userCartItems.push({\n          ...book,\n          quantity\n        });\n      }\n\n      // Save to localStorage\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\n      resolve(userCartItems);\n    }, 500);\n  });\n};\nexport const updateCartItem = (bookId, quantity) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n      if (quantity <= 0) {\n        userCartItems = userCartItems.filter(item => item.id !== bookId);\n      } else {\n        const itemIndex = userCartItems.findIndex(item => item.id === bookId);\n        if (itemIndex !== -1) {\n          userCartItems[itemIndex].quantity = quantity;\n        }\n      }\n\n      // Save to localStorage\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\n      resolve(userCartItems);\n    }, 400);\n  });\n};\nexport const removeFromCart = bookId => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n      userCartItems = userCartItems.filter(item => item.id !== bookId);\n\n      // Save to localStorage\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\n      resolve(userCartItems);\n    }, 400);\n  });\n};\nexport const clearCart = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n      userCartItems = [];\n\n      // Save to localStorage\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\n      resolve(userCartItems);\n    }, 300);\n  });\n};\nexport const processOrder = orderData => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!currentUser) {\n        reject(new Error('User not authenticated'));\n        return;\n      }\n      const {\n        cartItems,\n        user\n      } = orderData;\n      if (!user) {\n        reject(new Error('User information is required'));\n        return;\n      }\n      if (!user.name || user.name.trim().length < 2) {\n        reject(new Error('Valid user name is required'));\n        return;\n      }\n      if (!user.email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(user.email)) {\n        reject(new Error('Valid user email is required'));\n        return;\n      }\n      if (cartItems.length === 0) {\n        reject(new Error('Cart is empty'));\n        return;\n      }\n      debugger;\n      // Simulate order processing\n      const orderId = `ORDER-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\n\n      // Clear cart after successful order\n      userCartItems = [];\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\n      resolve({\n        orderId,\n        status: 'confirmed',\n        estimatedDelivery: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString(),\n        orderDate: new Date().toLocaleDateString()\n      });\n    }, 1500);\n  });\n};","map":{"version":3,"names":["BASE_URL","saveRefreshedToken","response","refreshedToken","headers","get","localStorage","setItem","getBooks","fetch","ok","Error","status","data","json","error","message","validateOrder","orderData","Promise","resolve","reject","setTimeout","cartItems","user","name","trim","length","email","test","orderId","Date","now","Math","random","toString","substr","toUpperCase","estimatedDelivery","toLocaleDateString","getBookById","bookId","book","mockBooks","find","b","id","mockUsers","currentUser","userCartItems","loginUser","credentials","method","body","JSON","stringify","token","registerUser","userData","password","existingUser","u","newUser","createdAt","toISOString","push","logoutUser","removeItem","getCurrentUser","getItem","parse","getCartItems","savedCart","addToCart","quantity","existingItemIndex","findIndex","item","updateCartItem","filter","itemIndex","removeFromCart","clearCart","processOrder","orderDate"],"sources":["C:/Users/sudha/Documents/Learnings/React/React_Learnings/online_book_store/online-book-store/src/api.js"],"sourcesContent":["// const mockBooks = [\r\n//   {\r\n//     id: 1,\r\n//     title: \"The Alchemist\",\r\n//     author: \"Paulo Coelho\",\r\n//     price: 299.99,\r\n//     description: \"A philosophical tale about a shepherd boy's journey to fulfill his personal legend and find his treasure.\",\r\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1654371463i/18144590.jpg\",\r\n//     stock_quantity: 10\r\n//   },\r\n//   {\r\n//     id: 2,\r\n//     title: \"Atomic Habits\",\r\n//     author: \"James Clear\",\r\n//     price: 499.00,\r\n//     description: \"A comprehensive guide to building good habits and breaking bad ones through small, incremental changes.\",\r\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1535115320i/40121378.jpg\",\r\n//     stock_quantity: 20\r\n//   },\r\n//   {\r\n//     id: 3,\r\n//     title: \"Clean Code\",\r\n//     author: \"Robert C. Martin\",\r\n//     price: 799.50,\r\n//     description: \"Essential principles and practices for writing maintainable, readable, and efficient code.\",\r\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1436202607i/3735293.jpg\",\r\n//     stock_quantity: 30\r\n//   },\r\n//   {\r\n//     id: 4,\r\n//     title: \"Deep Work\",\r\n//     author: \"Cal Newport\",\r\n//     price: 450.00,\r\n//     description: \"Rules for focused success in a distracted world, showing how to cultivate deep, meaningful work.\",\r\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1447957962i/25744928.jpg\",\r\n//     stock_quantity: 15\r\n//   },\r\n//   {\r\n//     id: 5,\r\n//     title: \"The Pragmatic Programmer\",\r\n//     author: \"Andrew Hunt\",\r\n//     price: 850.00,\r\n//     description: \"Timeless tips and techniques for becoming a more effective and productive programmer.\",\r\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1401432508i/4099.jpg\",\r\n//     stock_quantity: 25\r\n//   },\r\n//   {\r\n//     id: 6,\r\n//     title: \"Thinking, Fast and Slow\",\r\n//     author: \"Daniel Kahneman\",\r\n//     price: 599.00,\r\n//     description: \"Insights into how the mind makes decisions, exploring the interplay between intuitive and deliberate thinking.\",\r\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1317793965i/11468377.jpg\",\r\n//     stock_quantity: 18\r\n//   },\r\n//   {\r\n//     id: 7,\r\n//     title: \"Design Patterns\",\r\n//     author: \"Erich Gamma\",\r\n//     price: 999.00,\r\n//     description: \"Elements of reusable object-oriented software design, presenting fundamental patterns for better code architecture.\",\r\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1348027904i/85009.jpg\",\r\n//     stock_quantity: 12\r\n//   },\r\n//   {\r\n//     id: 8,\r\n//     title: \"Refactoring\",\r\n//     author: \"Martin Fowler\",\r\n//     price: 899.00,\r\n//     description: \"Improving the design of existing code through systematic techniques and proven refactoring methods.\",\r\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1386925632i/44936.jpg\",\r\n//     stock_quantity: 20\r\n//   },\r\n//   {\r\n//     id: 9,\r\n//     title: \"You Don't Know JS\",\r\n//     author: \"Kyle Simpson\",\r\n//     price: 399.00,\r\n//     description: \"Deep dive into JavaScript's core mechanisms, covering scope, closures, prototypes, and async patterns.\",\r\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1431016796i/25136217.jpg\",\r\n//     stock_quantity: 22\r\n//   },\r\n//   {\r\n//     id: 10,\r\n//     title: \"Introduction to Algorithms\",\r\n//     author: \"Thomas H. Cormen\",\r\n//     price: 1200.00,\r\n//     description: \"Comprehensive guide to algorithms and data structures, covering analysis, design, and implementation.\",\r\n//     image_url: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1387741681i/108986.jpg\",\r\n//     stock_quantity: 10\r\n//   }\r\n// ];\r\n\r\nlet BASE_URL = \"http://localhost:8080/\"\r\n\r\nexport const saveRefreshedToken = (response) => {\r\n  const refreshedToken = response.headers.get(\"X-Refreshed-Token\");\r\n  if (refreshedToken) {\r\n    localStorage.setItem(\"bookstore_token\", refreshedToken);\r\n\r\n  }\r\n}\r\n\r\n// export const getBooks = async () => {\r\n\r\n//   try {\r\n//     const token = localStorage.getItem(\"bookstore_token\");\r\n\r\n//     const response = await fetch(BASE_URL + \"api/books\", {\r\n//       method: \"GET\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         \"Authorization\": `Bearer ${token}`\r\n//       }\r\n//     });\r\n\r\n//     saveRefreshedToken(response);\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error(`HTTP error! status: ${response.status}`);\r\n//     }\r\n\r\n//     const data = await response.json();\r\n//     return data;\r\n//   } catch (error) {\r\n//     console.log(\"error\", error);\r\n//     throw new Error(`Failed to fetch books: ${error.message}`);\r\n//   }\r\n\r\n// };\r\nexport const getBooks = async () => {\r\n  try {\r\n  const response = await fetch(\"http://localhost:8080/api/books\");\r\n \r\n  if (!response.ok) {\r\n  throw new Error(`HTTP error! status: ${response.status}`);\r\n  }\r\n \r\n  const data = await response.json();\r\n  return data; // assuming your backend returns an array of books\r\n  } catch (error) {\r\n  throw new Error(`Failed to fetch books: ${error.message}`);\r\n  }\r\n };\r\nexport const validateOrder = (orderData) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const { cartItems, user } = orderData;\r\n\r\n      if (!user) {\r\n        reject(new Error('User information is required'));\r\n        return;\r\n      }\r\n\r\n      if (!user.name || user.name.trim().length < 2) {\r\n        reject(new Error('Valid user name is required'));\r\n        return;\r\n      }\r\n\r\n      if (!user.email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(user.email)) {\r\n        reject(new Error('Valid user email is required'));\r\n        return;\r\n      }\r\n\r\n      if (cartItems.length === 0) {\r\n        reject(new Error('Cart cannot be empty'));\r\n        return;\r\n      }\r\n      debugger\r\n      resolve({\r\n        orderId: `ORDER-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`,\r\n        status: 'confirmed',\r\n        estimatedDelivery: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString()\r\n      });\r\n    }, 1000);\r\n  });\r\n};\r\n\r\nexport const getBookById = (bookId) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const book = mockBooks.find(b => b.id === bookId);\r\n      if (book) {\r\n        resolve(book);\r\n      } else {\r\n        reject(new Error(`Book with ID ${bookId} not found`));\r\n      }\r\n    }, 300);\r\n  });\r\n};\r\n\r\n// Authentication API Functions\r\nconst mockUsers = [];\r\nlet currentUser = null;\r\nlet userCartItems = [];\r\n\r\n\r\nexport const loginUser = async (credentials) => {\r\n  try {\r\n    const response = await fetch(BASE_URL + \"api/user/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(credentials)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Login failed: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n\r\n    // Assuming backend returns { token, name }\r\n    const { token, name } = data;\r\n\r\n    // Construct user object like your mock version\r\n    const user = {\r\n      id: Date.now(), // or use a real ID if backend provides it\r\n      name,\r\n      email: credentials.email\r\n    };\r\n\r\n    // Save to localStorage\r\n    localStorage.setItem(\"bookstore_token\", token);\r\n    localStorage.setItem(\"bookstore_user\", JSON.stringify(user));\r\n\r\n    return { user, token };\r\n  } catch (error) {\r\n    throw new Error(`Login error: ${error.message}`);\r\n  }\r\n};\r\n\r\n\r\nexport const registerUser = (userData) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const { name, email, password } = userData;\r\n\r\n      // Check if user already exists\r\n      const existingUser = mockUsers.find(u => u.email === email);\r\n      if (existingUser) {\r\n        reject(new Error('User with this email already exists'));\r\n        return;\r\n      }\r\n\r\n      // Create new user\r\n      const newUser = {\r\n        id: mockUsers.length + 2,\r\n        name,\r\n        email,\r\n        password,\r\n        createdAt: new Date().toISOString()\r\n      };\r\n\r\n      mockUsers.push(newUser);\r\n      currentUser = { ...newUser };\r\n      delete currentUser.password; // Don't return password\r\n\r\n      const token = `token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n      // Store in localStorage\r\n      localStorage.setItem('bookstore_token', token);\r\n      localStorage.setItem('bookstore_user', JSON.stringify(currentUser));\r\n\r\n      resolve({ user: currentUser, token });\r\n    }, 1200);\r\n  });\r\n};\r\n\r\nexport const logoutUser = () => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      currentUser = null;\r\n      userCartItems = [];\r\n      localStorage.removeItem('bookstore_token');\r\n      localStorage.removeItem('bookstore_user');\r\n      localStorage.removeItem('bookstore_cart');\r\n      resolve();\r\n    }, 300);\r\n  });\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const token = localStorage.getItem('bookstore_token');\r\n      const user = localStorage.getItem('bookstore_user');\r\n\r\n      if (token && user) {\r\n        try {\r\n          currentUser = JSON.parse(user);\r\n          resolve({ user: currentUser, token });\r\n        } catch (error) {\r\n          reject(new Error('Invalid session data'));\r\n        }\r\n      } else {\r\n        reject(new Error('No active session'));\r\n      }\r\n    }, 500);\r\n  });\r\n};\r\n\r\n// Cart API Functions\r\nexport const getCartItems = () => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (!currentUser) {\r\n        reject(new Error('User not authenticated'));\r\n        return;\r\n      }\r\n\r\n      // Load cart from localStorage\r\n      const savedCart = localStorage.getItem('bookstore_cart');\r\n      if (savedCart) {\r\n        try {\r\n          userCartItems = JSON.parse(savedCart);\r\n        } catch (error) {\r\n          userCartItems = [];\r\n        }\r\n      }\r\n\r\n      resolve(userCartItems);\r\n    }, 400);\r\n  });\r\n};\r\n\r\nexport const addToCart = (book, quantity = 1) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (!currentUser) {\r\n        reject(new Error('User not authenticated'));\r\n        return;\r\n      }\r\n\r\n      const existingItemIndex = userCartItems.findIndex(item => item.id === book.id);\r\n\r\n      if (existingItemIndex !== -1) {\r\n        userCartItems[existingItemIndex].quantity += quantity;\r\n      } else {\r\n        userCartItems.push({ ...book, quantity });\r\n      }\r\n\r\n      // Save to localStorage\r\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\r\n\r\n      resolve(userCartItems);\r\n    }, 500);\r\n  });\r\n};\r\n\r\nexport const updateCartItem = (bookId, quantity) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (!currentUser) {\r\n        reject(new Error('User not authenticated'));\r\n        return;\r\n      }\r\n\r\n      if (quantity <= 0) {\r\n        userCartItems = userCartItems.filter(item => item.id !== bookId);\r\n      } else {\r\n        const itemIndex = userCartItems.findIndex(item => item.id === bookId);\r\n        if (itemIndex !== -1) {\r\n          userCartItems[itemIndex].quantity = quantity;\r\n        }\r\n      }\r\n\r\n      // Save to localStorage\r\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\r\n\r\n      resolve(userCartItems);\r\n    }, 400);\r\n  });\r\n};\r\n\r\nexport const removeFromCart = (bookId) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (!currentUser) {\r\n        reject(new Error('User not authenticated'));\r\n        return;\r\n      }\r\n\r\n      userCartItems = userCartItems.filter(item => item.id !== bookId);\r\n\r\n      // Save to localStorage\r\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\r\n\r\n      resolve(userCartItems);\r\n    }, 400);\r\n  });\r\n};\r\n\r\nexport const clearCart = () => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (!currentUser) {\r\n        reject(new Error('User not authenticated'));\r\n        return;\r\n      }\r\n\r\n      userCartItems = [];\r\n\r\n      // Save to localStorage\r\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\r\n\r\n      resolve(userCartItems);\r\n    }, 300);\r\n  });\r\n};\r\n\r\nexport const processOrder = (orderData) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (!currentUser) {\r\n        reject(new Error('User not authenticated'));\r\n        return;\r\n      }\r\n\r\n      const { cartItems, user } = orderData;\r\n\r\n      if (!user) {\r\n        reject(new Error('User information is required'));\r\n        return;\r\n      }\r\n\r\n      if (!user.name || user.name.trim().length < 2) {\r\n        reject(new Error('Valid user name is required'));\r\n        return;\r\n      }\r\n\r\n      if (!user.email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(user.email)) {\r\n        reject(new Error('Valid user email is required'));\r\n        return;\r\n      }\r\n\r\n      if (cartItems.length === 0) {\r\n        reject(new Error('Cart is empty'));\r\n        return;\r\n      }\r\n      debugger\r\n      // Simulate order processing\r\n      const orderId = `ORDER-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\r\n\r\n      // Clear cart after successful order\r\n      userCartItems = [];\r\n      localStorage.setItem('bookstore_cart', JSON.stringify(userCartItems));\r\n\r\n      resolve({\r\n        orderId,\r\n        status: 'confirmed',\r\n        estimatedDelivery: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString(),\r\n        orderDate: new Date().toLocaleDateString()\r\n      });\r\n    }, 1500);\r\n  });\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,QAAQ,GAAG,wBAAwB;AAEvC,OAAO,MAAMC,kBAAkB,GAAIC,QAAQ,IAAK;EAC9C,MAAMC,cAAc,GAAGD,QAAQ,CAACE,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;EAChE,IAAIF,cAAc,EAAE;IAClBG,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAEJ,cAAc,CAAC;EAEzD;AACF,CAAC;;AAED;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,MAAMK,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACJ,MAAMN,QAAQ,GAAG,MAAMO,KAAK,CAAC,iCAAiC,CAAC;IAE/D,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAClB,MAAM,IAAIC,KAAK,CAAC,uBAAuBT,QAAQ,CAACU,MAAM,EAAE,CAAC;IACzD;IAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAAC,CAAC;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IAChB,MAAM,IAAIJ,KAAK,CAAC,0BAA0BI,KAAK,CAACC,OAAO,EAAE,CAAC;EAC1D;AACD,CAAC;AACF,OAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}